package com.blueskyapps.getmycall;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.telephony.SmsMessage;
import android.util.Log;
import android.widget.Toast;

import java.util.Objects;

import static android.content.Context.MODE_PRIVATE;


public class SmsReceiver extends BroadcastReceiver {
    String phoneNumber, TAG = "KARMA_SMS_RECEIVED";
    String divertNumber, pass;


    @Override
    public void onReceive(Context context, Intent intent) {

        final String SMS_RECEIVED = "android.provider.Telephony.SMS_RECEIVED";
        final String appDesc = " This message was generated by GetMyCall";
        String query;

        Log.i("TAG", "onReceive: Message received successfully");
        if (Objects.requireNonNull(intent.getAction()).equals(SMS_RECEIVED)) {
            Bundle bundle = intent.getExtras();

            if (bundle != null) {
                Object[] pdus = (Object[]) bundle.get("pdus");
                final SmsMessage[] messages = new SmsMessage[pdus.length];

                for (int i = 0; i < pdus.length; i++) {
                    messages[i] = SmsMessage.createFromPdu((byte[]) pdus[i]);
                }

                phoneNumber = messages[0].getOriginatingAddress();
                query = messages[0].getMessageBody();

                if (query.contains(appDesc)) {
                    query = query.replace(appDesc, "");
                    Log.d(TAG, "onReceive: " + "Found GetMyCall Msg");

                    //Decrypting Received Msg
                    Boolean success;
                    AES aes = new AES();
                    try {
                        query = aes.decrypt(query);
                        Log.d(TAG, "onReceive: " + query);
                        Toast.makeText(context, "Message Decrypted = " + query, Toast.LENGTH_LONG).show();
                        success = true;
                    } catch (Exception e) {
                        e.printStackTrace();
                        success = false;
                    }

                    //After successful decryption
                    if (success) {

                        //Toast.makeText(context, query, Toast.LENGTH_SHORT).show();
                        String[] FormatSplit = query.split("\\$");

                        if (FormatSplit.length == 3) {
                            Log.d(TAG, "onReceive: Format Split: " + FormatSplit[0] + "\n" + FormatSplit[1] + "\n" + FormatSplit[2]);

                            String[] timeSplit = FormatSplit[2].split("-");

                            Info info = new Info();

                            Boolean validMsg;

                            //Checking for valid date
                            if (timeSplit[0] != null) {
                                //Log.d(TAG, "onReceive: Date Validation: "+timeSplit[0]);
                                if (timeSplit[0].equals(info.getDate())) {
                                    Log.d(TAG, "onReceive: Date validation success!");
                                    validMsg = true;
                                } else {
                                    Log.d(TAG, "onReceive: Date expired!!\nToday Date:"+info.getDate()+"\nMessage Date:"+timeSplit[0]);
                                    validMsg = false;
                                }
                            } else {
                                validMsg = false;
                            }

                            //Checking for valid Time
                            if (timeSplit[1] != null && timeSplit.length == 2 && validMsg) {
                                validMsg = info.checkInfo(timeSplit[1]);
                                Log.d(TAG, "onReceive: Valid time format message found!");
                            } else {
                                validMsg = false;
                                Log.e(TAG, "onReceive: Time format invalid");
                            }

                            //On valid Msg setting call forwarding
                            if (validMsg) {
                                try {
                                    if (query.contains("$")) {
                                        Log.d(TAG, "onReceive: ");
                                        Log.d(TAG, "onReceive: Divert number = " + FormatSplit[0] + "\nPassword = " + FormatSplit[1]);
                                        divertNumber = FormatSplit[0];
                                        pass = FormatSplit[1];
                                        checker(divertNumber, pass, context);
                                    } else {
                                        Log.d(TAG, "onReceive: Karma Working");
                                    }
                                } catch (Exception e) {
                                    Log.d("Not Matched", "Something Went Wrong" + e);
                                }
                            } else {
                                Log.e(TAG, "onReceive: Expired Message!");
                                Toast.makeText(context, "Message Expired!", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Log.e(TAG, "onReceive: Invalid Msg Found");
                            Toast.makeText(context, "Invalid Msg Found", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Log.e(TAG, "onReceive: Decryption Failed");
                        Toast.makeText(context, "Decryption Failed", Toast.LENGTH_SHORT).show();
                    }
                }
            }
        }
    }

    public void checker(String tempDivertNumber, String tempPass, Context context) {
        SharedPreferences sharedPreferences = context.getSharedPreferences("mini_db", MODE_PRIVATE);

        if (tempPass.equals(sharedPreferences.getString("password", "abc123")) && sharedPreferences.getBoolean("mode", true)) {
            setCallForwarding(context, tempDivertNumber);
        }
    }

    private void setCallForwarding(Context context, String number) {
        Dialer dialer = new Dialer();
        if (!number.equals("0123456789")) {
            // Toast.makeText(context, "Message matched!\nNumber=" + number + "\nPassword=" + password, Toast.LENGTH_LONG).show();
            dialer.SetCallForwarding(context,number);
        } else {
            dialer.RemoveCallForwarding(context);
        }
    }
}
